#include"leetcode.h"

class Solution {
private:
	int n;
	enum STATE : char {
		STATE_INIT,
		STATE_SYMBOL,
		STATE_INTEGER,
		STATE_POINT_INTEGER,
		STATE_POINT_NOINTEGER,
		STATE_FRACTION,
		STATE_E,
		STATE_E_SYMBOL,
		STATE_E_INTERGER,
		STATE_END,
		STATE_ERROR,
		STATE_COUNT,
	};
	enum CONDITION : char {
		CONDITION_SPACE,
		CONDITION_SYMBOL,
		CONDITION_DIGIT,
		CONDITION_POINT,
		CONDITION_E,
		CONDITION_ERROR,
		CONDITION_COUNT,
	};

	CONDITION ctc[256];
	void initctc() {
		for (unsigned short i = 0; i < 256; i++) {
			if (i == ' ') { ctc[i] = CONDITION::CONDITION_SPACE; }
			else if(i == '+' || i == '-') { ctc[i] = CONDITION::CONDITION_SYMBOL; }
			else if(i >= '0' && i <= '9') { ctc[i] = CONDITION::CONDITION_DIGIT; }
			else if (i == '.') { ctc[i] = CONDITION::CONDITION_POINT; }
			else if (i == 'e' || i == 'E') { ctc[i] = CONDITION::CONDITION_E; }
			else { ctc[i] = CONDITION::CONDITION_ERROR; }
		}
	}
	CONDITION parsecondition(char c) {
		return ctc[c];
	}
	STATE transfer[STATE::STATE_COUNT][CONDITION::CONDITION_COUNT] = {
		{STATE::STATE_INIT,STATE::STATE_SYMBOL,STATE::STATE_INTEGER,STATE::STATE_POINT_NOINTEGER,STATE::STATE_ERROR,STATE::STATE_ERROR},
		{STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_INTEGER,STATE::STATE_POINT_NOINTEGER,STATE::STATE_ERROR,STATE::STATE_ERROR},
		{STATE::STATE_END,STATE::STATE_ERROR,STATE::STATE_INTEGER,STATE::STATE_POINT_INTEGER,STATE::STATE_E,STATE::STATE_ERROR},
		{STATE::STATE_END,STATE::STATE_ERROR,STATE::STATE_FRACTION,STATE::STATE_ERROR,STATE::STATE_E,STATE::STATE_ERROR},
		{STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_FRACTION,STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_ERROR},
		{STATE::STATE_END,STATE::STATE_ERROR,STATE::STATE_FRACTION,STATE::STATE_ERROR,STATE::STATE_E,STATE::STATE_ERROR},
		{STATE::STATE_ERROR,STATE::STATE_E_SYMBOL,STATE::STATE_E_INTERGER,STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_ERROR},
		{STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_E_INTERGER,STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_ERROR},
		{STATE::STATE_END,STATE::STATE_ERROR,STATE::STATE_E_INTERGER,STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_ERROR},
		{STATE::STATE_END,STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_ERROR},
		{STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_ERROR,STATE::STATE_ERROR},
	};
	STATE statetransfer(STATE s, CONDITION c) {
		return transfer[s][c];
	}
public:
	bool isNumber(string s) {
		initctc();
		n = s.length();
		STATE state = STATE::STATE_INIT;
		CONDITION condition;
		for (int i = 0; i < n; i++) {
			condition = parsecondition(s[i]);
			if (condition == CONDITION::CONDITION_ERROR) { return false; }
			state = statetransfer(state,condition);
			if (state == STATE::STATE_ERROR) { return false; }
		}
		state = statetransfer(state, CONDITION::CONDITION_SPACE);
		return  state == STATE::STATE_END;
	}
};

//int main()
//{
//	Solution s;
//	string str = "0";
//	bool ans = s.isNumber(str);
//	cout << ans;
//	system("PAUSE");
//	return 0;
//}