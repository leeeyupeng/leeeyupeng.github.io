#include"leetcode.h"

class Solution {
public:
    vector<int> numsGame(vector<int>& nums) {
        int n = nums.size();
        for(int i = 0; i < n; i ++){nums[i]-=i;}
        vector<int> ans(n);
        ans[0] = 0;
        priority_queue<int,vector<int>,less<int>> qmin;
        priority_queue<int,vector<int>,greater<int>> qmax;        
        long long mid;
        long long minsums=0;
        long long maxsums=0;
        qmin.push(nums[0]);
        minsums+=nums[0];
        for(int i = 1; i < n; i ++){
            if(qmin.size() > qmax.size()){
                if(qmin.top() > nums[i]){
                    maxsums+=qmin.top();
                    minsums-=qmin.top();
                    qmax.push(qmin.top());
                    qmin.pop();
                    qmin.push(nums[i]);
                    minsums+=nums[i];
                }else{
                    qmax.push(nums[i]);
                    maxsums+=nums[i];
                }
            }else{
                if(!qmax.empty() && qmax.top() < nums[i]){
                    maxsums-=qmax.top();
                    minsums+=qmax.top();
                    qmin.push(qmax.top());
                    qmax.pop();
                    qmax.push(nums[i]);
                    maxsums+=nums[i];
                }else{
                    qmin.push(nums[i]);
                    minsums+=nums[i];
                }
            }

            mid = qmin.top();
            ans[i] = (int)((qmin.size() * mid - minsums + maxsums - qmax.size()*mid) % 1000000007ll);
        }
        return ans;
    }
};

// int main(){
//     vector<int> nums;
//     for(int i = 0; i < 100000; i ++){
//         nums.push_back(rand()%100);
//     }
//     nums = {225,811,502,88,874,55,280,459,743,903,347,428,144,629,511,452,385,561,201,299,580,335,542,173,18,523,401,787,934,818,636,738,658,630,475,577,463,535,660,607,628,973,459,993,933,478,589,711,626,760,599,361,761,874,697,72,432,258,224,995,584,666,212,36,98,291,114,231,873,776,819,710,61,196,924,919,578,744,57,710,437,936,175,307,389,185,634,869,578,645,9,12,718,80,253,258,803,373,161,122,867,957,31,816,467,926,494,20,546,416,479,15,414,832,293,941,568,767,593,857,533,304,925,185,313,247,77,264,405,321,638,910,860,68,910,443,785,779,500,573,804,120,164,477,806,267,926,405,219,667,117,314,651,269,410,129,695,854,879,556,492,687,90,885,668,13,104,150,578,87,63,405,448,477,816,991,609,465,32,621,355,153,231,320,33,329,270,449,379,636,33,478,526,541,395,769,847,255,86,188,15,997,601,142,815,223,381,127,254,422,483,138,207,501,560,115,27,287,458,386,962,131,397,818,721,481,250,806,459,527,425,887,969,755,321,224,610,357,888,340,797,695,406,373,244,405,591,400,488,855,481,988,105,655,455,421,143,708,746,564,506,206,831,59,825,726,990,863,467,168,585,687,569,840,559,721,479,573,885,751,882,560,177,194,292,330,891,931,919,97,479,129,932,707,790,537,201,835,410,520,97,369,846,272,188,37,129,895,440,531,665,797,209,576,466,926,411,846,603,670,992,956,489,440,837,927,734,778,220,82,644,193,699,509,276,794,388,126,83,263,93,554,783,780,26,716,63,672,972,679,876,67,437,614,32,958,964,110,902,500,720,33,101,798,886,298,248,915,846,85,924,968,308,717,441,234,598,241,342,88,912,192,220,536,331,957,366,737,960,303,397,142,222,449,224,127,322,889,821,291,205,738,619,386,443,225,959,799,800,503,360,796,849,662,597,456,395,512,837,918,541,154,781,862,44,717,554,498,581,953,630,132,494,35,522,517,621,150,600,531,868,292,489,453,590,20,716,37,803,365,91,682,830,854,500,629,530,767,603,918,726,123,723,116,546,422,795,356,438,277,542,40,985,121,240,494,4,488,847,800,610,257,386,334,609,287,16,363,891,684,706,367,825,758,273,952,328,788,910,797,905,303,180,472,362,142,616,836,203,884,470,818,502,185,470,829,342,611,77,92,50,838,475,832,271,119,441,293,291,360,31,843,109,954,719,617,166,249,785,806,736,98,168,913,974,728,927,968,274,549,973,503,254,964,296,547,908,773,695,259,818,257,776,870,201,9,398,428,492,733,705,404,249,330,317,361,22,74,862,869,356,978,518,710,365,214,294,650,9,120,940,621,352,409,939,99,296,779,488,951,856,931,848,427,75,316,329,178,484,262,14,159,926,164,531};
//     Solution solution;
//     vector<int> ans = solution.numsGame(nums);
//     return 0;
// }