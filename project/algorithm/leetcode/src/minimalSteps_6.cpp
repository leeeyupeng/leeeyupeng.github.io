#include"leetcode.h"

#define MAX 100
#define MMAX 16
#define OMAX 40
#define INT_MAX (1<<16)
class Solution {
private:
	int n, m;
	int S;
	int T;
	vector<int> M;
	int mnums;
	vector<int> O;
	int matrix[MAX][MAX];

	bool flagMatrix[MAX][MAX];
	int StoT;
	int StoO[OMAX];
	int MtoO[MMAX][OMAX];
	int MtoT[MMAX];

	int StoOtoM[MMAX];
	int MtoOtoM[MMAX][MMAX];
	//int MtoT[MMAX];
	void Scan(vector<string>& maze) {
		n = maze.size();
		m = maze[0].size();
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (maze[i][j] == 'M') { matrix[i][j] = M.size(); M.push_back(i*m + j); }
				else if (maze[i][j] == 'O') { matrix[i][j] = O.size();  O.push_back(i*m + j); }
				else if (maze[i][j] == 'S') { matrix[i][j] = 0; S = i * m + j; }
				else if (maze[i][j] == 'T') { matrix[i][j] = 0; T = i * m + j; }
			}
		}
	}

	void InitSto(vector<string>& maze) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				flagMatrix[i][j] = false;
			}
		}
		StoT = INT_MAX;
		for (int i = 0; i < O.size(); i++) {
			StoO[i] = INT_MAX;
		}
		int sx = S / m;
		int sy = S % m;
		queue<int>* q1 = new queue<int>();
		queue<int>* q2 = new queue<int>();
		q1->push(S);
		flagMatrix[sx][sy] = true;
		int cost = 0;
		while (!q1->empty()) {
			while (!q1->empty()) {
				int grid = q1->front();
				q1->pop();
				int x = grid / m;
				int y = grid % m;
				if (grid == T) { StoT = cost; }
				if (maze[x][y] == 'O') { StoO[matrix[x][y]] = cost; }

				if (x > 0 && flagMatrix[x - 1][y] == false && maze[x - 1][y] != '#') { flagMatrix[x - 1][y] = true; q2->push((x - 1)*m + y); }
				if (x < n - 1 && flagMatrix[x + 1][y] == false && maze[x + 1][y] != '#') { flagMatrix[x + 1][y] = true; q2->push((x + 1)*m + y); }
				if (y > 0 && flagMatrix[x][y - 1] == false && maze[x][y - 1] != '#') { flagMatrix[x][y - 1] = true; q2->push(x * m + y - 1); }
				if (y < m - 1 && flagMatrix[x][y + 1] == false && maze[x][y + 1] != '#') { flagMatrix[x][y + 1] = true; q2->push(x * m + y + 1); }
			}

			cost++;
			queue<int> *temp;
			temp = q1;
			q1 = q2;
			q2 = temp;
		}
	}

	void InitMto(vector<string>& maze, int index) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				flagMatrix[i][j] = false;
			}
		}
		MtoT[index] = INT_MAX;
		for (int i = 0; i < O.size(); i++) {
			MtoO[index][i] = INT_MAX;
		}

		int mx = M[index] / m;
		int my = M[index] % m;

		queue<int>* q1 = new queue<int>();
		queue<int>* q2 = new queue<int>();
		q1->push(M[index]);
		flagMatrix[mx][my] = true;
		int cost = 0;
		while (!q1->empty()) {
			while (!q1->empty()) {
				int grid = q1->front();
				q1->pop();
				int x = grid / m;
				int y = grid % m;
				if (grid == T) { MtoT[index] = cost; }
				if (maze[x][y] == 'O') { MtoO[index][matrix[x][y]] = cost; }

				if (x > 0 && flagMatrix[x - 1][y] == false && maze[x - 1][y] != '#') { flagMatrix[x - 1][y] = true; q2->push((x - 1)*m + y); }
				if (x < n - 1 && flagMatrix[x + 1][y] == false && maze[x + 1][y] != '#') { flagMatrix[x + 1][y] = true; q2->push((x + 1)*m + y); }
				if (y > 0 && flagMatrix[x][y - 1] == false && maze[x][y - 1] != '#') { flagMatrix[x][y - 1] = true; q2->push(x * m + y - 1); }
				if (y < m - 1 && flagMatrix[x][y + 1] == false && maze[x][y + 1] != '#') { flagMatrix[x][y + 1] = true; q2->push(x * m + y + 1); }
			}

			cost++;
			queue<int> *temp;
			temp = q1;
			q1 = q2;
			q2 = temp;
		}
	}

	void InitStoOtoM() {
		for (int i = 0; i < M.size(); i++) {
			StoOtoM[i] = INT_MAX;
		}
		for (int i = 0; i < M.size(); i++) {
			for (int j = 0; j < O.size(); j++) {
				if (StoO[j] != INT_MAX && MtoO[i][j] != INT_MAX) {
					StoOtoM[i] = min(StoOtoM[i], StoO[j] + MtoO[i][j]);
				}
			}
		}
	}
	void InitMtoM(int index) {
		for (int i = 0; i < M.size(); i++) {
			MtoOtoM[index][i] = INT_MAX;
		}
		for (int i = 0; i < M.size(); i++) {
			for (int j = 0; j < O.size(); j++) {
				if (MtoO[index][j] != INT_MAX && MtoO[i][j] != INT_MAX) {
					MtoOtoM[index][i] = min(MtoOtoM[index][i], MtoO[index][j] + MtoO[i][j]);
				}
			}
		}
	}

	int greed()
	{
		int ans = INT_MAX;
		int mnums = M.size();
		if (mnums == 0) {
			return StoT;
		}
		bool flag[MMAX];
		for (int i = 0; i < mnums; i++) {
			flag[i] = false;
		}

		int index = 0;
		for (int i = 0; i < mnums; i++) {
			if (StoOtoM[i] != INT_MAX) {
				if (ans > StoOtoM[i]) {
					index = i;
					ans = StoOtoM[i];
				}
			}
		}

		flag[index] = true;
		for (int i = 0; i < mnums - 1; i++) {
			int minindex = 0;
			int mincost = INT_MAX;
			for (int j = 0; j < mnums; j++) {
				if (flag[j] == false && MtoOtoM[index][j] != INT_MAX) {
					if (mincost > MtoOtoM[index][j]) {
						mincost = MtoOtoM[index][j];
						minindex = j;
					}
				}
			}
			if (mincost == INT_MAX) { return INT_MAX; }
			index = minindex;
			ans += mincost;
			flag[index] = true;
		}
		if (MtoT[index] == INT_MAX) { return INT_MAX; }
		ans += MtoT[index];
		return ans;
	}

	int cost(int m[]) {
		int cost = StoOtoM[m[0]];
		for (int i = 0; i < mnums - 1; i++) {
			cost += MtoOtoM[m[i]][m[i + 1]];
		}
		cost += MtoT[m[mnums - 1]];
		return cost;
	}
	struct chrom {
		int mArr[MMAX];
		float adapt;
		int dis;
	};
	int popsize = 10;
	int max = 1000;
	vector<chrom> group;
	void geneticinit()
	{
		srand((unsigned)time(NULL));
		popsize = mnums * 10;
		max = mnums * 1000;
		
		for (int i = 0; i < popsize; i++) {
			chrom temp;
			int j = 0;
			while (j < mnums) {
				int t = rand() % mnums;
				bool flag = false;
				for (int k = 0; k < j; k++) {
					if (temp.mArr[k] == t) { flag = true; break; }
				}
				if (flag == false) { temp.mArr[j] = t; j++; }
			}
			group.push_back(temp);
		}
	}
	void geneticfitness() {
		for (int i = 0; i < popsize; i++) {
			group[i].dis = cost(group[i].mArr);
			group[i].adapt = 1.0f / group[i].dis;
		}
	}
	void geneticselect()
	{
		vector<chrom> tempgroup;
		float sum = 0.0f;
		for (int i = 0; i < popsize; i++) {
			sum += group[i].adapt;
		}

		float pick = 0.0f;
		for (int i = 0; i < popsize; i++) {
			pick = (float)rand() * 1.0f / RAND_MAX;
			for (int j = 0; j < popsize; j++) {
				pick = pick - group[j].adapt / sum;
				if (pick <= 0) {
					tempgroup.push_back(group[j]);
				}
			}
		}

		group = tempgroup;
	}

	void geneticcross() {

	}
	int Genetic()
	{		
		geneticinit();
		geneticfitness();

		for (int i = 0; i < max; i++) {
			geneticselect();
		}

	}
public:
	int minimalSteps(vector<string>& maze) {
		Scan(maze);
		InitSto(maze);
		for (int i = 0; i < M.size(); i++) {
			InitMto(maze, i);
		}

		InitStoOtoM();
		for (int i = 0; i < M.size(); i++) {
			InitMtoM(i);
		}

		mnums = M.size();
		int ans = INT_MAX;
		if (M.empty()) {
			ans = StoT;
		}
		else
		{
			ans = Genetic();
		}

		if (ans == INT_MAX) { return -1; }
		return ans;
	}
};

//int main()
//{
//	Solution s;
//	vector<string> matrix{
////".MM..", "#..M.", ".#..#", "..O..", ".S.OM", ".#M#T", "###..", "....."
////		"S#O", "M.#", "M.T"
//		//dfs��ʱ
////		"MMMMM","MS#MM","MM#TO"
////"..#..",".S#..","..#T#"
////"##TOO#O#", "OO##O.S#", "###.O###", "#..O#O##"
////"S.#.M","O.#.O","M.#.T"
//
////"TOO", ".##", "OMS", ".O.", "#OO"
////".#....M#.M", "#.O...#O#O", ".##..##..#", "...#O#.M.#", "..S#..OO..", "#..T#M.###", ".O.....#.#", "...O..##..", ".....O.#.M", "...#......"
////".M..SM..T", ".OMM.MOMM"
////"MMMMM","MS#MM","MM#TO"
////".MM..", "#..M.", ".#..#", "..O..", ".S.OM", ".#M#T", "###..", "....."
//		
//	};
//	int ans = s.minimalSteps(matrix);
//	cout << ans;
//	system("PAUSE");
//
//	return 0;
//
//}